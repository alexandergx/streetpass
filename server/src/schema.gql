# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AlertTypingDto {
  chatId: String
  userId: String!
}

type Auth {
  accessToken: String!
  code: String
  refreshToken: String!
  user: AuthUser!
}

type AuthTokens {
  accessToken: String!
  refreshToken: String!
}

type AuthUser {
  bio: String
  countryCode: String
  dob: DateTime
  email: String
  joinDate: DateTime!
  media: [UserMedia!]!
  name: String
  notificationPreferences: NotificationPreferences!
  phoneNumber: String
  school: String
  sex: Boolean
  streetpass: Boolean
  streetpassPreferences: StreetpassPreferences!
  userId: String!
  work: String
}

input BlockUserDto {
  userId: String!
}

input ChatNotificationsDto {
  chatId: String!
  notifications: Boolean!
}

type ChatsPagination {
  chats: [UserChat!]!
  continue: Boolean!
  lastUpdated: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input GetChatsDto {
  index: Float
}

input GetMatchesDto {
  index: Float
}

input GetMessagesDto {
  chatId: String!
  index: Float
  userId: String!
}

input GetUserDto {
  userId: String
}

type Match {
  age: Float!
  bio: String
  matchDate: String
  media: [UserMedia!]!
  name: String!
  school: String
  seen: Boolean!
  sex: Boolean
  streetpassDate: String
  unmatch: Boolean
  userId: String!
  work: String
}

input MatchDto {
  match: Boolean!
  userId: String!
}

type MatchesPagination {
  continue: Boolean!
  matches: [Match!]!
}

type MessageMetadata {
  lastUpdated: String
  recipient: String!
  sender: String!
  typing: Boolean
}

type MessagesPagination {
  continue: Boolean!
  messages: [UserMessage!]!
}

type MessagesSubscription {
  chat: UserChat
  message: UserMessage!
  metadata: MessageMetadata!
}

type Mutation {
  blockUser(input: BlockUserDto!): Boolean!
  chatNotifications(input: ChatNotificationsDto!): Boolean!
  deleteAccount: Boolean!
  match(input: MatchDto!): Boolean!
  reactMessage(input: ReactMessageDto!): Boolean!
  readChat(input: ReadChatDto!): Boolean!
  registerDevice(input: RegisterDeviceDto!): Boolean!
  removeMedia(input: RemoveMediaDto!): Boolean!
  seenMatch(input: SeenMatchDto!): Boolean!
  sendMessage(input: SendMessageDto!): Boolean!
  sendPin(input: SendPinDto!): Boolean!
  signIn(input: SignInDto!): Auth!
  sortMedia(input: SortMediaDto!): Boolean!
  streetpass(input: StreetpassDto!): Boolean!
  unmatch(input: UnmatchDto!): Boolean!
  updateUser(input: UpdateUserDto!): Boolean!
  uploadMedia(input: UploadMediaDto!): String!
  verifyPhoneNumber(input: VerifyPhoneNumberDto!): Boolean!
}

type NotificationPreferences {
  emails: Boolean!
  matches: Boolean!
  messages: Boolean!
  newsletters: Boolean!
  streetpasses: Boolean!
}

type Query {
  alertTyping(input: AlertTypingDto!): Boolean!
  getChats(input: GetChatsDto!): ChatsPagination!
  getMatches(input: GetMatchesDto!): MatchesPagination!
  getMessages(input: GetMessagesDto!): MessagesPagination!
  getStreetpasses: [Streetpass!]!
  getUser(input: GetUserDto!): UserProfile!
  refreshTokens: AuthTokens!
  searchChats(input: SearchChatsDto!): [UserChat!]!
  updateChats(input: UpdateChatsDto!): UpdateChats!
  updateMessages(input: UpdateMessagesDto!): UpdateMessages!
}

input ReactMessageDto {
  chatId: String!
  messageId: String!
  reaction: String
}

input ReadChatDto {
  chatId: String!
}

input RegisterDeviceDto {
  deviceToken: String!
  manufacturer: String!
  unregister: Boolean
}

input RemoveMediaDto {
  mediaIds: [String!]!
}

input SearchChatsDto {
  name: String!
}

input SeenMatchDto {
  userId: String!
}

input SendMessageDto {
  chatId: String
  message: String!
  userId: String!
}

input SendPinDto {
  countryCode: String!
  phoneNumber: String!
}

input SignInDto {
  appleAuth: String
}

input SortMediaDto {
  mediaIds: [String!]!
}

type Streetpass {
  age: Float!
  bio: String
  media: [UserMedia!]!
  name: String!
  school: String
  sex: Boolean
  streetpassDate: DateTime!
  userId: String!
  work: String
}

input StreetpassDto {
  lat: Float!
  lon: Float!
}

type StreetpassPreferences {
  age: [Float!]
  discoverable: Boolean
  location: Boolean
  sex: Boolean
}

input SubscribeChatsDto {
  chatId: String
  userId: String!
}

input SubscribeMatchesDto {
  userId: String!
}

input SubscribeStreetpassesDto {
  userId: String!
}

type Subscription {
  matches(input: SubscribeMatchesDto!): Match!
  messages(input: SubscribeChatsDto!): MessagesSubscription!
  streetpasses(input: SubscribeStreetpassesDto!): Boolean!
}

input UnmatchDto {
  userId: String!
}

type UpdateChats {
  chats: [UserChat!]
  lastUpdated: String
}

input UpdateChatsDto {
  index: Float
  lastUpdated: DateTime
}

type UpdateMessages {
  messages: [UserMessage!]!
}

input UpdateMessagesDto {
  chatId: String!
  messageId: String!
  userId: String!
}

input UpdateUserDto {
  bio: String
  dob: DateTime
  email: String
  name: String
  notificationPreferences: String
  school: String
  sex: Boolean
  streetpass: Boolean
  streetpassPreferences: String
  work: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UploadMediaDto {
  image: Upload
  video: Upload
}

type UserChat {
  age: Float!
  bio: String!
  chatDate: String!
  chatId: String!
  lastMessage: String!
  lastMessageId: String!
  lastMessageUserId: String!
  matchDate: String!
  media: [UserMedia!]!
  name: String!
  notifications: Boolean!
  school: String!
  sex: Boolean
  streetpassDate: String!
  unread: Boolean!
  userId: String!
  work: String!
}

type UserMedia {
  image: String
  mediaId: String!
  thumbnail: String!
  video: String
}

type UserMessage {
  chatId: String!
  date: String!
  message: String!
  messageId: String!
  reaction: String
  userId: String!
}

type UserProfile {
  age: Float!
  bio: String
  media: [UserMedia!]!
  name: String!
  school: String
  sex: Boolean
  userId: String!
  work: String
}

input VerifyPhoneNumberDto {
  securityPin: String!
}